/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-04-21 02:39:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1459747375077L));
    _jspx_dependants.put("jar:file:/C:/dev/jado_공은아/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/projectSample/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"resources/js/jquery-2.2.2.min.js\"></script>\r\n");
      out.write("\t<link href=\"https://fonts.googleapis.com/css?family=Yanone+Kaffeesatz\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body{\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write(".wrap {\r\n");
      out.write("     width: 500px;\r\n");
      out.write("     margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write(".btn-holder {\r\n");
      out.write("     text-align: center;\r\n");
      out.write("     margin: 10px 0 10px 0;\r\n");
      out.write("}\r\n");
      out.write("#calendar table {\r\n");
      out.write("     border-collapse: collapse;\r\n");
      out.write("     text-align: center;\r\n");
      out.write("}\r\n");
      out.write("#calendar table thead td, th {\r\n");
      out.write("     height: 50px;\r\n");
      out.write("     font-weight: bold;\r\n");
      out.write("     \r\n");
      out.write("}  \r\n");
      out.write("#calendar table td, th {\r\n");
      out.write("     border: solid 1px white;\r\n");
      out.write("}\r\n");
      out.write("#calendar table td.date-cell {\r\n");
      out.write("     height: 50px;\r\n");
      out.write("}\r\n");
      out.write("#calendar table td.sun {\r\n");
      out.write("     color: red;\r\n");
      out.write("}\r\n");
      out.write("#calendar table td.sat {\r\n");
      out.write("     color: blue;\r\n");
      out.write("}\r\n");
      out.write("#calendar table td.not-this-month {\r\n");
      out.write("     background: #ddd;\r\n");
      out.write("     color: #999;\r\n");
      out.write("}\r\n");
      out.write("#btnPrev, #btnNext {\r\n");
      out.write("    background: #2196F3;\r\n");
      out.write("\twidth: 80px;height: 30px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("}\r\n");
      out.write(".moving{\r\n");
      out.write("\t display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("#set{\r\n");
      out.write("\tposition: relative; right: 25%;\r\n");
      out.write("}\r\n");
      out.write("#currentDate{\r\n");
      out.write("\tposition: relative; right: 15%;\r\n");
      out.write("\tfont-family: 'Yanone Kaffeesatz', sans-serif;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    font-size: 40px;\r\n");
      out.write("    text-shadow: 0 0px 30px rgba(0, 0, 0, 0.2);\r\n");
      out.write("}\r\n");
      out.write("th{\r\n");
      out.write("    background: \t#2196F3;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class='wrap'>\r\n");
      out.write("     <div class='btn-holder'>\r\n");
      out.write("     <div class=\"moving\" id=\"set\" >\r\n");
      out.write("          <div class=\"moving\" id='btnPrev' style=\"\"><</div>\r\n");
      out.write("          <div class=\"moving\" id='btnNext'>></div>\r\n");
      out.write("     </div>\r\n");
      out.write("          <span id='currentDate' ></span>\r\n");
      out.write("     </div>\r\n");
      out.write("     <div id=\"calendar\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var calendar = new controller();\r\n");
      out.write("calendar.init();\r\n");
      out.write("function controller(target) {\r\n");
      out.write("\r\n");
      out.write("     var that = this;  \r\n");
      out.write("     var m_oMonth = new Date();\r\n");
      out.write("     m_oMonth.setDate(1);\r\n");
      out.write("\r\n");
      out.write("     this.init = function() {\r\n");
      out.write("          that.renderCalendar();\r\n");
      out.write("          that.initEvent();\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* 달력 UI 생성 */\r\n");
      out.write("     this.renderCalendar = function() {\r\n");
      out.write("          var arrTable = [];\r\n");
      out.write("\r\n");
      out.write("          arrTable.push(\"<table id='table1'><colgroup>\");\r\n");
      out.write("          for(var i=0; i<7; i++) {\r\n");
      out.write("               arrTable.push('<col width=\"100\">');\r\n");
      out.write("          }         \r\n");
      out.write("          arrTable.push('</colgroup><thead><tr>');\r\n");
      out.write("\r\n");
      out.write("          var arrWeek = \"일월화수목금토\".split(\"\");\r\n");
      out.write("\r\n");
      out.write("          for(var i=0, len=arrWeek.length; i<len; i++) {\r\n");
      out.write("               var sClass = '';\r\n");
      out.write("               sClass += i % 7 == 0 ? 'sun' : '';\r\n");
      out.write("               sClass += i % 7 == 6 ? 'sat' : '';\r\n");
      out.write("               arrTable.push('<th class=\"'+sClass+'\">' + arrWeek[i] + '</th>');\r\n");
      out.write("          }\r\n");
      out.write("          arrTable.push('</tr></thead>');\r\n");
      out.write("          arrTable.push('<tbody>');\r\n");
      out.write("\r\n");
      out.write("          var oStartDt = new Date(m_oMonth.getTime());\r\n");
      out.write("        // 1일에서 1일의 요일을 빼면 그 주 첫번째 날이 나온다.\r\n");
      out.write("          oStartDt.setDate(oStartDt.getDate() - oStartDt.getDay());\r\n");
      out.write("\r\n");
      out.write("          for(var i=0; i<100; i++) {\r\n");
      out.write("               if(i % 7 == 0) {\r\n");
      out.write("                    arrTable.push('<tr>');\r\n");
      out.write("               }\r\n");
      out.write("\r\n");
      out.write("               var sClass = 'date-cell '\r\n");
      out.write("            sClass += m_oMonth.getMonth() != oStartDt.getMonth() ? 'not-this-month ' : '';\r\n");
      out.write("               sClass += i % 7 == 0 ? 'sun' : '';\r\n");
      out.write("               sClass += i % 7 == 6 ? 'sat' : '';\r\n");
      out.write("\r\n");
      out.write("               arrTable.push('<td class=\"'+sClass+'\">' + oStartDt.getDate() + '</td>');\r\n");
      out.write("               oStartDt.setDate(oStartDt.getDate() + 1);\r\n");
      out.write("\r\n");
      out.write("               if(i % 7 == 6) {\r\n");
      out.write("                    if(m_oMonth.getMonth() != oStartDt.getMonth()) {\r\n");
      out.write("                         break;\r\n");
      out.write("                    }\r\n");
      out.write("               }\r\n");
      out.write("          }\r\n");
      out.write("          arrTable.push('</tbody></table>');\r\n");
      out.write("\r\n");
      out.write("          $('#calendar').html(arrTable.join(\"\"));\r\n");
      out.write("\r\n");
      out.write("          that.changeMonth();\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* Next, Prev 버튼 이벤트 */\r\n");
      out.write("     this.initEvent = function() {\r\n");
      out.write("          $('#btnPrev').click(that.onPrevCalendar);\r\n");
      out.write("          $('#btnNext').click(that.onNextCalendar);\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* 이전 달력 */\r\n");
      out.write("     this.onPrevCalendar = function() {\r\n");
      out.write("          m_oMonth.setMonth(m_oMonth.getMonth() - 1);\r\n");
      out.write("          that.renderCalendar();\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* 다음 달력 */\r\n");
      out.write("     this.onNextCalendar = function() {\r\n");
      out.write("          m_oMonth.setMonth(m_oMonth.getMonth() + 1);\r\n");
      out.write("          that.renderCalendar();\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* 달력 이동되면 상단에 현재 년 월 다시 표시 */\r\n");
      out.write("     this.changeMonth = function() {\r\n");
      out.write("          $('#currentDate').text(that.getYearMonth(m_oMonth));\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    /* 날짜 객체를 년 월 문자 형식으로 변환 */\r\n");
      out.write("     this.getYearMonth = function(oDate) {\r\n");
      out.write("    \tvar x = oDate.getMonth();\r\n");
      out.write("    \tvar yy;\r\n");
      out.write("    \tswitch (x) {\r\n");
      out.write("\t\tcase 0:\r\n");
      out.write("\t\t\tyy= \"January\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 1:\r\n");
      out.write("\t\t\tyy= \"Fabruary\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 2:\r\n");
      out.write("\t\t\tyy= \"March\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 3:\r\n");
      out.write("\t\t\tyy= \"April\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 4:\r\n");
      out.write("\t\t\tyy= \"May\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 5:\r\n");
      out.write("\t\t\tyy= \"June\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 6:\r\n");
      out.write("\t\t\tyy= \"July\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 7:\r\n");
      out.write("\t\t\tyy= \"Auguest\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 8:\r\n");
      out.write("\t\t\tyy= \"September\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 9:\r\n");
      out.write("\t\t\tyy= \"October\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 10:\r\n");
      out.write("\t\t\tyy= \"Nobember\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\tcase 11:\r\n");
      out.write("\t\t\tyy= \"December\"\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("          return yy ;\r\n");
      out.write("     }\r\n");
      out.write("}\r\n");
      out.write("$('td').click(function(){\r\n");
      out.write("\t  var col = $(this).parent().children().index($(this));\r\n");
      out.write("\t  var row = $(this).parent().parent().children().index($(this).parent());\r\n");
      out.write("\t  $(this).css('backgroundColor',' #999')\r\n");
      out.write("\tsend(row,col);\r\n");
      out.write("\t  var xx=  document.getElementById('table1')\r\n");
      out.write("});\r\n");
      out.write("function ChanColor(row,col){\r\n");
      out.write("\tvar xx=  document.getElementById('table1').rows[row].cells[col];\r\n");
      out.write("\t$(xx).css('backgroundColor','#999')\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var ws = null;\r\n");
      out.write("var nickname= \"");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("\";\r\n");
      out.write("alert(nickname)\r\n");
      out.write("function connect() {\r\n");
      out.write("  // 아래의 적색 경로는 서버측의 ServerEndPoint 를 사용해야 하고 ? 표시 오른쪽에는 파라미터가 온다\r\n");
      out.write("var target = \"ws://203.233.196.76:8666/app/cal?usr=\"+nickname+\"&Pnum=One&Theme=Develop\"; //서버에서 파라미터를 \r\n");
      out.write(" if ('WebSocket' in window) {\r\n");
      out.write("\t ws = new WebSocket(target);\r\n");
      out.write(" \r\n");
      out.write(" } else if ('MozWebSocket' in window) {\r\n");
      out.write("     ws = new MozWebSocket(target);\r\n");
      out.write(" } else {\r\n");
      out.write("     alert('WebSocket is not supported by this browser.');\r\n");
      out.write("     return;\r\n");
      out.write(" }\r\n");
      out.write(" ws.onopen = function () {\r\n");
      out.write("\r\n");
      out.write(" };\r\n");
      out.write(" ws.onmessage = function (event) {\r\n");
      out.write("\t var data = event.data\r\n");
      out.write("\t var data2=data.split(\":\")\r\n");
      out.write("\tvar data3 = data2[2].split(\",\")\r\n");
      out.write("\r\n");
      out.write("\tvar data2_1=data2[1].substr(1,1)\r\n");
      out.write("\tvar data3_1=data3[0].substr(0,1);\r\n");
      out.write("\t data2_1=Number(data2_1)+1;\r\n");
      out.write("\t data3_1=Number(data3_1);\r\n");
      out.write("\t ChanColor(data2_1,data3_1)\r\n");
      out.write("\r\n");
      out.write(" };\r\n");
      out.write(" ws.onclose = function () {\r\n");
      out.write("     document.getElementById(\"msg\").innerText = 'Info: WebSocket connection closed.';\r\n");
      out.write(" \r\n");
      out.write(" };\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function send(row, col) {// JSON 문자열을 서버로 전송한다\r\n");
      out.write("\tvar msg = {\r\n");
      out.write("\t\t\t\"usrName\":\"nickname\", \"row\":row.toString(), \"col\":col.toString()\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar jsonStr = JSON.stringify(msg);\r\n");
      out.write("\t\tws.send(jsonStr);\r\n");
      out.write("        //\tws.send(msg);\r\n");
      out.write("    //});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\tconnect();\r\n");
      out.write("\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /WEB-INF/views/calendar.jsp(231,15) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.loginName}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }
}
